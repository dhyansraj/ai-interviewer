# Local development Dockerfile using local MCP Mesh source
# For development and testing with local changes to MCP Mesh

FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Create non-root user matching the official runtime
RUN groupadd -r mcp-mesh && useradd -r -g mcp-mesh -m -s /bin/bash mcp-mesh

# Install system dependencies
RUN apt-get update && apt-get install -y \
    # Build tools for Python packages
    gcc \
    g++ \
    # Network utilities for health checks
    curl \
    # Git for development
    git \
    # Clean up
    && rm -rf /var/lib/apt/lists/*

# Copy and install local MCP Mesh source
COPY --chown=mcp-mesh:mcp-mesh src/runtime/python/ ./mcp_mesh_local/
RUN cd mcp_mesh_local && pip install --no-cache-dir -e .

# Switch to non-root user
USER mcp-mesh

# Set environment variables for the backend
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    MCP_MESH_HTTP_PORT=8080 \
    LOG_LEVEL=DEBUG

# Copy requirements first (better caching)
COPY --chown=mcp-mesh:mcp-mesh ai-interviewer/backend/requirements.txt ./

# Install backend-specific dependencies
RUN pip install --no-cache-dir --user -r requirements.txt

# Copy backend application code (will be overridden by volume mount in local mode)
COPY --chown=mcp-mesh:mcp-mesh ai-interviewer/backend/ ./backend/

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:${MCP_MESH_HTTP_PORT:-8080}/health || exit 1

# Expose port
EXPOSE ${MCP_MESH_HTTP_PORT:-8080}

# Run the application
WORKDIR /app/backend
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8080", "--reload"]