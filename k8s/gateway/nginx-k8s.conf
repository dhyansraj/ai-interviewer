# nginx.conf - AI Interviewer NGINX configuration with Lua for Kubernetes (Auth-only version)
worker_processes auto;
error_log stderr warn;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /usr/local/openresty/nginx/conf/mime.types;
    default_type application/octet-stream;

    # Temporary directories for nobody user
    client_body_temp_path /tmp/nginx/client_body_temp;
    proxy_temp_path /tmp/nginx/proxy_temp;
    fastcgi_temp_path /tmp/nginx/fastcgi_temp;
    uwsgi_temp_path /tmp/nginx/uwsgi_temp;
    scgi_temp_path /tmp/nginx/scgi_temp;

    # Lua package path for our OAuth scripts
    lua_package_path '/etc/nginx/lua/?.lua;;';
    lua_shared_dict sessions 10m;      # Session cache
    lua_shared_dict oauth_states 1m;   # OAuth state cache
    
    # Initialize DEV_MODE and OAuth config from environment
    init_by_lua_block {
        ngx.log(ngx.ERR, "Initializing with DEV_MODE: ", os.getenv("DEV_MODE") or "nil")
        _G.DEV_MODE = os.getenv("DEV_MODE") or "false"
        
        -- Initialize OAuth configuration
        _G.OAUTH_CONFIG = {
            google = {
                client_id = os.getenv("GOOGLE_CLIENT_ID"),
                client_secret = os.getenv("GOOGLE_CLIENT_SECRET")
            },
            github = {
                client_id = os.getenv("GITHUB_CLIENT_ID"),
                client_secret = os.getenv("GITHUB_CLIENT_SECRET")
            },
            microsoft = {
                client_id = os.getenv("MICROSOFT_CLIENT_ID"),
                client_secret = os.getenv("MICROSOFT_CLIENT_SECRET")
            },
            apple = {
                client_id = os.getenv("APPLE_CLIENT_ID"),
                client_secret = os.getenv("APPLE_CLIENT_SECRET")
            }
        }
        
        ngx.log(ngx.ERR, "Google Client ID: ", _G.OAUTH_CONFIG.google.client_id or "missing")
    }
    
    # DNS resolver for external API calls (use Kubernetes DNS)
    resolver 10.96.0.10 valid=300s;
    resolver_timeout 5s;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/javascript
        application/xml+rss
        application/json;

    # Log format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    # Upstream for FastAPI backend (Kubernetes service name)
    upstream fastapi_backend {
        server ai-interviewer-backend:8080;
        keepalive 32;
    }

    # Upstream for Grafana
    upstream grafana_backend {
        server ai-interviewer-grafana:3000;
        keepalive 8;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name localhost interviews.ink www.interviews.ink _;
        return 301 https://$host$request_uri;
    }

    # Main HTTPS server
    server {
        listen 443 ssl http2;
        server_name localhost interviews.ink www.interviews.ink;

        # SSL Configuration
        ssl_certificate /etc/ssl/certs/server.crt;
        ssl_certificate_key /etc/ssl/private/server.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;

        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # DNS resolver for Lua scripts (use Kubernetes DNS)
        resolver 10.96.0.10 valid=30s;
        
        # Variable for bearer token
        set $bearer_token "";
        set $dev_mode "false";

        # Grafana proxy (unprotected - Grafana handles its own authentication)
        # IMPORTANT: This must come BEFORE the root "/" location to match first
        location /grafana/ {
            # Proxy to Grafana service with subpath handling
            proxy_pass http://grafana_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Server $host;
            
            # WebSocket support for live updates
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # Additional headers for Grafana
            proxy_set_header X-Grafana-Org-Role Admin;
            
            # Timeouts for Grafana
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings for better performance
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # Static files (served directly by NGINX - no auth for Next.js app)
        location / {
            root /usr/local/openresty/nginx/html;
            try_files $uri $uri/ /index.html;
            
            # Cache static assets
            location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Login page (unprotected)
        location = /login.html {
            root /usr/local/openresty/nginx/html;
        }

        # Health check endpoint
        location = /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # OAuth initiation endpoints (handled by Lua scripts)
        location ~ ^/auth/(google|github|microsoft|apple)$ {
            content_by_lua_file /etc/nginx/lua/oauth_initiate.lua;
        }

        # OAuth callback endpoint (handled by Lua scripts)
        location = /auth/callback {
            # Add resolver for this location to resolve Redis hostname
            resolver 10.96.0.10 valid=30s;
            content_by_lua_file /etc/nginx/lua/oauth_callback_simple.lua;
        }

        # API endpoints (protected and proxied)
        location /api/ {
            access_by_lua_file /etc/nginx/lua/auth_check.lua;
            
            # Pass real bearer token for API authentication
            proxy_set_header Authorization "Bearer $bearer_token";
            
            # Proxy to FastAPI backend
            proxy_pass http://fastapi_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $server_name;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket endpoints (protected and proxied)
        location /ws/ {
            access_by_lua_file /etc/nginx/lua/auth_check.lua;
            
            # Pass real bearer token for WebSocket authentication
            proxy_set_header Authorization "Bearer $bearer_token";
            
            # WebSocket proxy configuration
            proxy_pass http://fastapi_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeouts
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
        }

        # Logout endpoint (handled by Lua scripts)
        location = /logout {
            content_by_lua_file /etc/nginx/lua/logout.lua;
        }

        # Block access to sensitive files
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
    }
}